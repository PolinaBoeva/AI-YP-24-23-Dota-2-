import streamlit as st
import time
import pandas as pd
import numpy as np
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score
from catboost import CatBoostClassifier
from sklearn.linear_model import RidgeClassifier
from sklearn.preprocessing import LabelEncoder

from client import ModelsAPIClient, DataAPIClient
from utils import get_ridge_params, get_catboost_params
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fit_model(api_client):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
    st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")

    type_of_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", ["‚öñÔ∏è Ridge Classifier", "üß† CatBoost Classifier"])
    params = {"type_of_model": type_of_model}
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {type_of_model}")

    st.subheader("–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")

    # –í—ã–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    if type_of_model == "‚öñÔ∏è Ridge Classifier":
        get_ridge_params(params)
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Ridge Classifier: {params}")
    elif type_of_model == "üß† CatBoost Classifier":
        get_catboost_params(params)
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã CatBoost Classifier: {params}")

    params["model_id"] = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏", value="model")

    if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
        # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")
        start_time = time.time()
        fit_response = api_client.fit_model(params)
        st.success("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞—Ç–æ!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        while True:
            status_response = api_client.get_fit_status()
            st.write(f"–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: {status_response['status']}")
            logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: {status_response['status']}")
            if status_response['status'] in ["completed", "failed"]:
                break
            time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

        end_time = time.time()
        st.write(f"‚è≥ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∏–ª–æ: {end_time - start_time:.2f} —Å–µ–∫")
        logger.info(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥.")

