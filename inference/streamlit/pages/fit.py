import streamlit as st
import time

from client import ModelsAPIClient
from utils import get_ridge_params, get_catboost_params
import streamlit_logging

logger = streamlit_logging.get_logger("fit_page")


def run_fit_page():
    st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")

    models_api_client: ModelsAPIClient = st.session_state.models_api_client

    model_type_input = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", ["‚öñÔ∏è Ridge Classifier", "üß† CatBoost Classifier"])
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_type_input}")

    st.subheader("–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")

    # –í—ã–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    if model_type_input == "‚öñÔ∏è Ridge Classifier":
        model_type = "RidgeClassifier"
        hyperparameters = get_ridge_params()
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Ridge Classifier: {hyperparameters}")
    elif model_type_input == "üß† CatBoost Classifier":
        model_type = "CatBoost"
        hyperparameters = get_catboost_params()
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã CatBoost Classifier: {hyperparameters}")

    model_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏", value="model")

    if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
        fit_request = {
            "model_type": model_type,
            "model_id": model_id,
            "hyperparameters": hyperparameters,
        }
        # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")
        start_time = time.time()
        fit_response = models_api_client.fit_model(fit_request)
        st.success("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞—Ç–æ!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        while True:
            status_response = models_api_client.get_fit_status(model_id)
            st.write(f"–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: {status_response['status']}")
            logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: {status_response['status']}")
            if status_response["status"] in ["Success", "Failed"]:
                break
            time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

        end_time = time.time()
        st.write(f"‚è≥ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∏–ª–æ: {end_time - start_time:.2f} —Å–µ–∫")
        logger.info(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥.")


if __name__ == "__page__":
    run_fit_page()
