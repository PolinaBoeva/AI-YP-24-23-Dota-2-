import pandas as pd
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score
import streamlit as st

from client import ModelsAPIClient, DataAPIClient
import streamlit_logging

logger = streamlit_logging.get_logger("predict_page")


def run_predict_page():
    st.header("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")

    models_api_client: ModelsAPIClient = st.session_state.models_api_client
    data_api_client: DataAPIClient = st.session_state.data_api_client

    try:
        if "account_ids" in st.session_state:
            account_ids = st.session_state.account_ids
        else:
            logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Account IDs –∏–∑ –∫—ç—à–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ API.")
            account_ids_response = data_api_client.get_account_ids()
            account_ids = account_ids_response["account_ids"]
            st.session_state.account_ids = account_ids
    except Exception as e:
        st.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Account IDs: {str(e)}.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Account IDs: {str(e)}.")

    prediction_regime = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", ["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ç—á–µ–π"]
    )

    if prediction_regime == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞":
        st.subheader("–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Radiant")
        radiant_selected_ids = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 Account IDs –¥–ª—è Radiant", account_ids, max_selections=5)

        st.subheader("–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Dire")
        dire_selected_ids = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 Account IDs –¥–ª—è Dire", account_ids, max_selections=5)

        if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
            if len(radiant_selected_ids) != 5 or len(dire_selected_ids) != 5:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 5 Account IDs –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                logger.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 5 Account IDs –¥–ª—è –æ–¥–Ω–æ–π –∏–ª–∏ –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥.")
                return

            data = {
                "radiant_team": [
                    {"account_id": int(account_id), "hero_name": "Pudge"} for account_id in radiant_selected_ids
                ],
                "dire_team": [
                    {"account_id": int(account_id), "hero_name": "Pudge"} for account_id in dire_selected_ids
                ],
            }

            try:
                prediction_response = models_api_client.predict(data)
                st.json(prediction_response)
                logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥ Radiant –∏ Dire.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}.")
    else:
        test_data_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["csv"])
        if test_data_file is not None:
            data = test_data_file.read()

        test_targets_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ü–µ–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", type=["csv"])

        if test_data_file is not None:
            if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
                try:
                    prediction_response = models_api_client.predict_csv(data)
                    st.json(prediction_response)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {len(prediction_response["predictions"]["prediction_probas"])} –º–∞—Ç—á–µ–π.")

                    if test_targets_file is not None:
                        targets = pd.read_csv(test_targets_file)["radiant_win"]
                        pred_probas = prediction_response["predictions"]["prediction_probas"]
                        preds = [1 if proba > 0.5 else 0 for proba in pred_probas]
                        metrics = {
                            "accuracy": accuracy_score(targets, preds),
                            "f1": f1_score(targets, preds),
                            "roc_auc": roc_auc_score(targets, pred_probas),
                        }
                        st.json(metrics)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}.")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}.")


if __name__ == "__page__":
    run_predict_page()
