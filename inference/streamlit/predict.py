import streamlit as st
import pandas as pd
from client import ModelsAPIClient, DataAPIClient
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def predict_model(models_api_client, data_api_client):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
    st.header("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ account IDs
    try:
        account_ids_response = (
            data_api_client.get_account_ids()
        )  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ data_api_client
        if account_ids_response:
            account_ids = account_ids_response["account_ids"]
            logger.info(f"Account IDs —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã: {account_ids}.")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å account IDs.")
            logger.error("–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Account IDs.")
            st.stop()
    except Exception as e:
        st.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Account IDs: {str(e)}.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Account IDs: {str(e)}.")
        st.stop()

    # –í—ã–±–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Radiant
    st.subheader("–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Radiant")
    radiant_selected_ids = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 Account IDs –¥–ª—è Radiant", account_ids, max_selections=5
    )

    # –í—ã–±–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Dire
    st.subheader("–í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Dire")
    dire_selected_ids = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 Account IDs –¥–ª—è Dire", account_ids, max_selections=5
    )

    if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        if len(radiant_selected_ids) != 5 or len(dire_selected_ids) != 5:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 5 Account IDs –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 5 Account IDs –¥–ª—è –æ–¥–Ω–æ–π –∏–ª–∏ –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥."
            )
            return

        data = {
            "radiant_team": [
                {"account_id": int(account_id), "hero_name": "Pudge"}
                for account_id in radiant_selected_ids
            ],
            "dire_team": [
                {"account_id": int(account_id), "hero_name": "Pudge"}
                for account_id in dire_selected_ids
            ],
        }

        try:
            prediction_response = models_api_client.predict(data)
            st.json(prediction_response)
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥ Radiant –∏ Dire.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}.")
