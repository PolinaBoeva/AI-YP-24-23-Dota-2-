import streamlit as st
import pandas as pd
from client import ModelsAPIClient, DataAPIClient

def predict_model(models_api_client, data_api_client):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
    st.header("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")

    # –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type="csv")

    if uploaded_file is not None:
        # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = pd.read_csv(uploaded_file)
        st.session_state.uploaded_data = data
        st.write("–í–æ—Ç –≤–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        st.dataframe(data)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ account IDs
    try:
        account_ids_response = data_api_client.get_account_ids()  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ data_api_client
        if account_ids_response:
            account_ids = account_ids_response['account_ids']
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å account IDs.")
            st.stop()
    except Exception as e:
        st.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Account IDs: {str(e)}.")
        st.stop()

    selected_account_ids = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ Account IDs –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", account_ids)

    if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        predictions = []
        for account_id in selected_account_ids:
            data = {"account_id": account_id}  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            try:
                prediction_response = models_api_client.predict(data)
                predictions.append(prediction_response)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è ID {account_id}: {str(e)}.")

        if predictions:
            st.write("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            for prediction in predictions:
                st.json(prediction)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    uploaded_test_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç (CSV)", type=["csv"])
    if uploaded_test_file is not None and st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"):
        try:
            prediction_csv_response = models_api_client.predict_csv(uploaded_test_file)
            st.write("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞:")
            st.json(prediction_csv_response)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}.")
